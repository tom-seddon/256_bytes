; 128 bytes

                .include "submodules/beeb/include/beeb.s65"
                .cpu '65c02'

*=0
                .dsection code
                .cwarn *>128,'128 byte overflow'
                .cerror *>$90,'zp overflow'

;-------------------------------------------------------------------------

; Adequate
                
                .section code
main_loop:
                ; fill line
                ldy #31
line_loop:
                tya
                sec
jsr_routine: jsr routine1
                lsr a
                lsr a
                lsr a
                lda #0
                sbc #0
screen_addr=*+1
                sta $7c00,y
                dey
                bpl line_loop
                inc yc
                bpl got_routine
                asl yc          ; $80->$00
                ; adjust routine
                lda jsr_routine+1
                adc #3          ; +4, C=0
                bpl got_routine_lsb
                lda #routine1
got_routine_lsb:
                sta jsr_routine+1
got_routine:
                ldx #1
                lda #32
                jsr set_crtc

                ; adjust screen addr
                clc
                adc screen_addr+0
                sta screen_addr+0
                bcc got_screen_addr
                lda screen_addr+1
                inc a
                bpl got_screen_addr_msb
                sbc #4
got_screen_addr_msb:
                sta screen_addr+1
got_screen_addr:

                ; next frame
                jsr set_crtc_addr
                ;jsr osrdch
                lda #19
                jsr osbyte

                bra main_loop
                
set_crtc_addr:
                ldx #13
                lda screen_addr+0
                jsr set_crtc
                lda screen_addr+1
                eor #$7c^$28
set_crtc:
                stx $fe00
                sta $fe01
                dex
                rts

filler_begin:
                .fill 128-(routines_end-routine1)-*,0
filler_size=*-filler_begin
                .cwarn filler_size>0,format('Total size: %d',128-filler_size)
                

routine1:
                ; fat grid
                and yc          ; 2
                rts             ; 3
yc:
                .byte 0
routine2:
                
                ; chequerboard
                eor yc          ; 2
                lsr a           ; 3
                rts             ; 4

routine3:
                ; diagonal lines
                sbc yc          ; 2
                lsr a           ; 3
                rts             ; 4

routines_end:

                .cerror routine2-routine1!=4
                .cerror routine3-routine2!=4
                .cerror routines_end-routine3!=4
                .endsection

;-------------------------------------------------------------------------
