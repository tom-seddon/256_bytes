                .include "submodules/beeb/include/beeb.s65"
                .cpu '65c02'

; refinement of lovebyte_2023_2
                
DMAX_COLOUR_CHANGE_COUNTER_VALUE=10 ; must be 10!
MIN_MAX_COLOUR=16
MAX_MAX_COLOUR=22
                
;-------------------------------------------------------------------------

*=$1230-((sn_write_rts-zp_code_actual_start)+(zp_code_unrelocated_start-start))-2
                .word entry
                .dsection code

;-------------------------------------------------------------------------

sn_freq_reg: .function ch
                .cerror ch<0||ch>3,"invalid SN channel"
                .endfunction $80|ch<<5

sn_atten_reg: .function ch
                .cerror ch<0||ch>3,"invalid SN channel"
                .endfunction $80|ch<<5|$10
                
sn_atten: .function ch,atten
                .cerror ch<0||ch>3,"invalid SN channel"
                .cerror atten<0||atten>15,"invalid SN attenuation"
                .endfunction sn_atten_reg(ch)|atten

sn_freqh: .function freq
                .cerror freq<0||freq>1023,"invalid SN frequency"
                .endfunction freq>>4

sn_freql: .function ch,freq
                .cerror freq<0||freq>1023,"invalid SN frequency"
                .endfunction sn_freq_reg(ch)|freq&15
                
                .section code
start:
init_prints:
                .byte 22
dmax_colour_change_counter_initial:
                .byte 10
                .byte 23,0,8,$f0
init_prints_end=*+6
entry:
                ldx #0
copy_zp_loop:
                .cerror (>start)<MIN_MAX_COLOUR||(>start)>=MAX_MAX_COLOUR,"oops" ;exact starting value isn't so important...
max_colour_initial=*+2;;;;;;;<--note
                lda start,x;;<--note
                sta 0,x
                cpx #init_prints_end-init_prints
                bcs +
                jsr oswrch
+
                sei
                stx system_via.ddra
                inx
                bne copy_zp_loop

                jmp zp_code_actual_start
zp_code_unrelocated_start:
                .logical *-start

; max_colour: .byte MIN_MAX_COLOUR
max_colour=max_colour_initial-start
dmax_colour_change_counter=dmax_colour_change_counter_initial-start
zp_code_actual_start:
main_loop:
                ldy #19
blocks_loop:
colour=*+1;;;;;;;;;;;;;;;;;<--note
                ldx #0;;;;;<--note
                inx
                cpx max_colour
                bcc got_colour
                ldx #0
got_colour:
                stx colour

                lda #0
                cpx #pixels_end-pixels
                bcs fill
                lda pixels,x
fill:
                ldx #7
fill_loop:
dest=*+1;;;;;;;;;;;;;;;;;;;;;;<-- note
                sta $3000,x;;;<-- note
                dex
                bpl fill_loop

                lda #13
fe00_constant=*+1;;;;;;;;;;<--note
                sta $fe00;;<--note
fe01_constant=*+1;;;;;;;;;;<--note
                inc $fe01;;<--note
                bne got_crtc
                dec a
                sta (fe00_constant)
                lda (fe01_constant)
                inc a
                cmp #$10
                bcc got_crtc_msb
                lda #$06
got_crtc_msb:
                sta (fe01_constant)

got_crtc:
                clc
                lda #8
                sta (fe00_constant) ;might come in handy...
                adc dest+0
                sta dest+0
                bcc dest_updated

update_dmax_colour:                
                dec dmax_colour_change_counter
                bne update_dest_msb

                ; C=1 - 0=+1, $fe=-1
                lda max_colour

dmax_colour=*+1;;;;;;;;;<--note
                adc #0;;<--note
                cmp #MAX_MAX_COLOUR+1
                bcc max_max_ok
max_max_breached:
                lda timing
                eor #15^31
                sta timing
                ldx #MAX_MAX_COLOUR
                bra toggle_dmax_colour
max_max_ok:
                cmp #MIN_MAX_COLOUR
                bcs min_max_ok
                ldx #MIN_MAX_COLOUR
toggle_dmax_colour:
                lda dmax_colour
                eor #$fe
                sta dmax_colour
                
                txa
min_max_ok:
                sta max_colour
                
                lda #DMAX_COLOUR_CHANGE_COUNTER_VALUE
                sta dmax_colour_change_counter

update_dest_msb:
                inc dest+1
                bpl dest_updated
                lda #$30
                sta dest+1

                ; fe00 was set to 8 above
                lda #$c0
                sta (fe01_constant)

                ; switch between A#4 and kind-of E4
                lda values_hi+3
                eor #$13^$17
                sta values_hi+3

dest_updated:
                dey
                bne blocks_loop

                ;
                pla             ;increment frame counter
                tsx
                txa
timing=*+1
                and #15
                bne set_attenuation
                
                ;
                ; Produce audible phenomena.
                ;

                lda $fe44
                and #3
                tax

                ; occasionally one of the notes will be slightly out.
                ; call it "character".
                ;clc
                
next_sn_latch_value=*+1;;;;;;;;;<--note
                lda #%10010000;;<--note
                adc #%00100000
                cmp #%11100000
                bcc +           ;taken if noise
                lda #%10010000
+
                sta next_sn_latch_value
                jsr sn_write
                eor values_lo,x ;set tone lo
                jsr sn_write
                
                lda values_hi,x
                jsr sn_write

set_attenuation:
                txa
                lsr a
                lsr a
                and #$0f
                ora next_sn_latch_value
                jsr sn_write

wait_vsync:                
                lda #2
wait_vsync_loop:
via_ifr_constant=*+1;;;;;;;;;;;;;;;;<--note
                bit system_via.ifr;;<--note
                beq wait_vsync_loop
                sta (via_ifr_constant)

                ; this will probably have to remain a jmp due to the
                ; distances involved :(
                jmp main_loop

sn_write:
                sta system_via.ora_no_handshake
                stz system_via.orb
                ldy #8
pixels:
                ; The flash state is such that Colours 0-7 and 8-15
                ; are the same.
                .byte $20       ;JSR $1230
                .byte $30       ;...BMI *+$12
                .byte $12       ;...ORA ($03)
                .byte $03       ;NOP1
                .byte $23       ;NOP1
                .byte $33       ;NOP1
                .byte $99       ;STA $2c0c,y ($19 is ORA!)
                .byte $0c       ;...TSB $3c2c
                .byte $2c       ;...BIT $1e3c
                .byte $3c       ;BIT $0f1e,x
                .byte $1e       ;...ASL $2f0f,x
                .byte $0f       ;...NOP1
                .byte $2f       ;NOP1
                .byte $3f       ;NOP1
pixels_end:
                sty system_via.orb
sn_write_rts:
                rts

_:=[]
_..=[$01de] ; 40 C4 = 261.6256 Hz
_..=[$0192] ; 43 D#4 = 311.1270 Hz
_..=[$013f] ; 47 G4 = 391.9954 Hz
_..=[$010c] ; 50 A#4 = 466.1638 Hz
                
values=_
values_lo: .byte (values&$0f)|$10
values_hi: .byte values>>4
                
                .endlogical
                .endsection
                