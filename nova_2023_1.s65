                .include "submodules/beeb/include/beeb.s65"
                .cpu '65c02'

; refinement of lovebyte_2023_2
                
;-------------------------------------------------------------------------

*=$00
                .dsection zp
                .cerror *>22,'oops'
*=$1900
                .dsection code

DMAX_COLOUR_CHANGE_COUNTER_VALUE=10
MIN_MAX_COLOUR=16
MAX_MAX_COLOUR=22
                
;-------------------------------------------------------------------------

                .section zp
dest: .fill 2
colour: .fill 1
other_pixel: .fill 1
max_colour: .fill 1
dmax_colour: .fill 1
noise_value: .fill 1
dmax_colour_change_counter: .fill 1
                .endsection

;-------------------------------------------------------------------------

sn_freq_reg: .function ch
                .cerror ch<0||ch>3,"invalid SN channel"
                .endfunction $80|ch<<5

sn_atten_reg: .function ch
                .cerror ch<0||ch>3,"invalid SN channel"
                .endfunction $80|ch<<5|$10
                
sn_atten: .function ch,atten
                .cerror ch<0||ch>3,"invalid SN channel"
                .cerror atten<0||atten>15,"invalid SN attenuation"
                .endfunction sn_atten_reg(ch)|atten

sn_freqh: .function freq
                .cerror freq<0||freq>1023,"invalid SN frequency"
                .endfunction freq>>4

sn_freql: .function ch,freq
                .cerror freq<0||freq>1023,"invalid SN frequency"
                .endfunction sn_freq_reg(ch)|freq&15
                
                .section code
start:
                lda #22
                tax
clear_zp_loop:
                stz 0,x
                dex
                bpl clear_zp_loop

                jsr oswrch
                lda #2
                jsr oswrch

                sei
                stx system_via.ddra

                lda #$30
                sta dest+1

                lda #MIN_MAX_COLOUR
                sta max_colour

                lda #DMAX_COLOUR_CHANGE_COUNTER_VALUE
                sta dmax_colour_change_counter

                ; lda #sn_atten(1,1)
                ; jsr sn_write

                ; ; silence startup beep on tone 3 
                ; lda #sn_atten(0,15)
                ; jsr sn_write

main_loop:
                ldx #19
blocks_loop:
                lda colour
                inc a
                cmp max_colour
                bcc got_colour
                lda #0
got_colour:
                sta colour

                lda #0
                ldy colour
                cpy #pixels_end-pixels
                bcs fill
                lda pixels,y
fill:
                ldy #7
fill_loop:
                sta (dest),y
                dey
                bpl fill_loop

                lda #13
                sta $fe00
                inc $fe01
                bne got_crtc
                dec a
                sta $fe00
                lda $fe01
                inc a
                cmp #$10
                bcc got_crtc_msb
                lda #$06
got_crtc_msb:
                sta $fe01

got_crtc:

                clc
                lda dest+0
                adc #8
                sta dest+0
                bcc dest_updated

update_dmax_colour:                
                dec dmax_colour_change_counter
                bne update_dest_msb

                ; C=1
                lda max_colour
                adc dmax_colour ;0=+1/$fe=-1
                cmp #MAX_MAX_COLOUR+1
                bcc max_max_ok
max_max_breached:
                ldy #MAX_MAX_COLOUR
                bra toggle_dmax_colour
max_max_ok:
                cmp #MIN_MAX_COLOUR
                bcs min_max_ok
                ldy #MIN_MAX_COLOUR
toggle_dmax_colour:
                lda dmax_colour
                eor #$fe
                sta dmax_colour
                tya
min_max_ok:
                sta max_colour
                
                lda #DMAX_COLOUR_CHANGE_COUNTER_VALUE
                sta dmax_colour_change_counter

update_dest_msb:
                inc dest+1
                bpl dest_updated
                lda #$30
                sta dest+1

dest_updated:
                dex
                bne blocks_loop

                lda #2
wait_vsync_loop:
                bit system_via.ifr
                beq wait_vsync_loop
                sta system_via.ifr

                jmp main_loop

sn_write: .proc
                sta system_via.ora_no_handshake
                stz system_via.orb
                ldx #8
                jsr +
                jsr +
                stx system_via.orb
+
                rts
                .endproc

                
pixels:
                .byte $00       ;brk <---------- no
                .byte $20       ;jsr $1230
                .byte $30       ;bmi rel <------ must be untaken!
                .byte $12       ;ora $03
                .byte $03       ;1-byte nop
                .byte $23       ;1-byte nop
                .byte $33       ;1-byte nop
                .byte $19       ;ora $2c0c,y
                .byte $0c       ;tsb $3c2c
                .byte $2c       ;bit $1e3c
                .byte $3c       ;bit $0f1e,x
                .byte $1e       ;asl $2f0f,x <-- no
                .byte $0f       ;1-byte nop
                .byte $2f       ;1-byte nop
                .byte $3f       ;1-byte nop
pixels_end:
                
                .endsection
                