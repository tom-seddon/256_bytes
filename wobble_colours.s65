                .include "submodules/beeb/include/beeb.s65"
                
*=$70
                .dsection zp
                
*=$1900
                .dsection code
                ;.cerror *>$1a00,"overflow"
                ;.fill $1a00-*,0
                
                .section zp
                .send zp

                .section code

start:
                ldx #4
                ldy #init_message-1-text
                bne prloop

initloop:
                bcc noadd
                lda text_x
add:
                adc #7
                sta text_x
noadd:
                ldy #message-1-text
prloop:
                lda text,y
                jsr oswrch
                dey
                bpl prloop

                clc
nextdelta:
                ror deltas-1,x
                bne initloop
                lda vals-2,x
                sta add+1
                dex
                bne nextdelta
                
                sei

                sty system_via.ddra
                txs
                
main_loop:
                tsx
                txa
                and #$0f
                pha             ;save counter&15
                ora #%11110000  ;noise attenuation
                jsr sn_write

                pla             ;restore counter&15
                eor #8
                and #$0f
                pha             ;save 4-bit tone attenuation 
                ora #%11010000  ;tone 3 attenuation
                jsr sn_write

                pla             ;restore 4-bit tone attenuation 
                ora #%10110000  ;tone 2 attenuation
                jsr sn_write

                lda #%11001111  ;tone 3 freq
                jsr sn_write

                txa
                lsr a
                pha             ;save counter>>1
                lsr a
                lsr a
                lsr a
                and #7
                tax
                lda music,x
                pha             ;save music byte
                jsr sn_write

                lda #%10101111  ;tone 2 freq
                jsr sn_write

                pla             ;restore music byte
                asl a           ;lower by 1 octave - also clc
                jsr sn_write

                pla             ;restore counter>>1
                cmp #128-40
                and #3
                ora #%11100100  ;white noise
                jsr sn_write

                ldx #13
                jsr read_crtc
                adc #80
                sta $fe01

                dex
                jsr read_crtc
                adc #0
                cmp #$10
                bcc +
                lda #$06
+
                sta $fe01

                pla             ;increment counter

                lda #2
-
                bit system_via.ifr
                beq -
                sta system_via.ifr

                inx             ;X=13
x_loop:
                ldy #128
y_loop:
                lda system_via.t1c_h
                ora #$70
                sta video_ula_palette

                eor #$7f
                sta video_ula_palette

                dey
                bne y_loop

                dex
                bne x_loop

                beq main_loop
                
sn_write:
                sta system_via.ora_no_handshake
                lda #$00
                sta system_via.orb
read_crtc:
                stx $fe00
                lda $fe01
                ldy #8
                sty system_via.orb
                rts

music:
                .byte 22        ;F
                .byte 25        ;Eb
                .byte 27        ;D
                .byte 25        ;Eb
                .byte 27        ;D
                .byte 25        ;Eb
                .byte 27        ;D
                .byte 30        ;C
                
message_text="BITSHIFTERS"
initial_x=256
initial_y=1023
                
text:
                .text message_text[::-1]
                .byte >initial_y
                .byte <initial_y
                .byte >initial_x
text_x:
                .byte <initial_x
                
                .text 4,25      ;PLOT4 = MOVE
                .text 5,11,4
message:
                .text 0,0,7,19
vals:
                .byte 247
                .byte 247
                .byte 7

deltas:
                .byte 1+2+4+16+64
                .byte 8+32+128
                .byte 1+2+4+16+64
                .byte 4+16+64+128
                
                .text 8,0,23    ;
                .text 2,22      ;MODE 2
init_message:

                .send code
                