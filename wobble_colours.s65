                .include "submodules/beeb/include/beeb.s65"
                
*=$70
                .dsection zp
                
*=$1900
                .dsection code
                
                .section zp
tmp:
                .fill 1
                .send zp

                .section code
                
                ldx #text.init-1-text
                jsr print

                ldy #31
init_loop:
                lda xs,y
                ;and #%11111000 ;no need! It's the pixel fraction!
                sta text.x+1

                and #%00000111
                sta text.x+0

                ldx #text.message-1-text
                jsr print

                clc
                lda text.y+1
                adc #32
                sta text.y+1
                bcc +
                inc text.y+0
+
                dey
                bpl init_loop

                sei
main_loop:
                ldx #13
                jsr read_crtc
                clc
                adc #80
                sta $fe01

                dex
                jsr read_crtc
                adc #0
                cmp #$10
                bcc +
                lda #$06
+
                sta $fe01

                lda #2
-
                bit system_via.ifr
                beq -
                sta system_via.ifr

                ldx #19
x_loop:
                ldy #128
y_loop:
                lda system_via.t1c_h
                ora #$f0
                sta video_ula_palette

                dey
                bne y_loop

                dex
                bne x_loop

                beq main_loop
                
print:
                lda text,x
                jsr oswrch
                dex
                bpl print
read_crtc:
                stx $fe00
                lda $fe01
                rts

message_text="BITSHIFTERS"
                
xs:
                .for i:=0,i<32,i+=1
value:=80-int(len(message_text)/2.0*8+sin(i/31.0*2.0*pi)*8)
                ; Mode 2 scale - 8 graphics units per pixel
                .byte (value&%00011111)<<3|(value&%11100000)>>5
                .next

text: .block
                .text message_text[::-1]
y:
                .byte 0         ;MSB
                .byte 31        ;LSB
x:
                ; Gets printed when the init text is printed! - so
                ; initial value must put the output somewhere off
                ; screen.
                .byte >1280     ;MSB
                .byte <1280     ;LSB
                .text 4,25      ;PLOT4 = MOVE
message:
                .text 15,0,18   ;GCOL 0,15
                .text 5
                .text 2,22      ;MODE 2
init:
                .bend
                
                .send code
                