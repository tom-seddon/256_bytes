                .include "submodules/beeb/include/beeb.s65"
                .cpu '65c02'

;-------------------------------------------------------------------------

sn_freq_reg: .function ch
                .cerror ch<0||ch>3,"invalid SN channel"
                .endfunction $80|ch<<5

sn_atten_reg: .function ch
                .cerror ch<0||ch>3,"invalid SN channel"
                .endfunction $80|ch<<5|$10
                
sn_atten: .function ch,atten
                .cerror ch<0||ch>3,"invalid SN channel"
                .cerror atten<0||atten>15,"invalid SN attenuation"
                .endfunction sn_atten_reg(ch)|atten

sn_freqh: .function freq
                .cerror freq<0||freq>1023,"invalid SN frequency"
                .endfunction freq>>4

sn_freql: .function ch,freq
                .cerror freq<0||freq>1023,"invalid SN frequency"
                .endfunction sn_freq_reg(ch)|freq&15

colour_from_brightness_index: .function index
                .cerror index<0||index>7,"invalid colour index"
                .endfunction (index&1)<<2|(index&2)>>1|(index&4)>>1
                
mode2_left_value: .function colour_
                .cerror colour_<0||colour_>15,"invalid mode 2 colour"
                .endfunction (colour_&8)<<4|(colour_&4)<<3|(colour_&2)<<2|(colour_&1)<<1

mode2_value: .function left_,right_
                .endfunction mode2_left_value(left_)|mode2_left_value(right_)>>1

;-------------------------------------------------------------------------

*=$00
                .dsection zp
*=$1900
                .dsection code

; DMAX_COLOUR_CHANGE_COUNTER_VALUE=7
; MIN_MAX_COLOUR=16
; MAX_MAX_COLOUR=24
                
;-------------------------------------------------------------------------

                .section zp
dest: .fill 2
crtc_addr_lsb: .fill 1
fy: .fill 1
fx: .fill 2
counter: .fill 1
sound_tmp: .fill 1
                .endsection

;-------------------------------------------------------------------------

                .section code
start:
                
                ldx #init_end-init
init_loop:
                lda init,x
                jsr oswrch
                dex
                bpl init_loop

                sta $ffff
                
                sei

                stx system_via.ddra

clear_zp_loop:
                inx
                stz 0,x
                bpl clear_zp_loop

                ; "dec dest+1"?
                lda #$7b
                sta dest+1

main_loop:
                ; jsr osrdch

                lda #2
wait_for_vblank_loop:
                bit system_via.ifr
                beq wait_for_vblank_loop
                sta system_via.ifr

                lda #31
                sta fy

fill_column_loop:
                jsr sierpinski

                and #7
                tax
                lda pixels,x

                ldy #7
fill_char_loop:
                sta (dest),y
                dey
                bpl fill_char_loop

                clc
                lda #$80
                ldy fy
                bne +
                lda #$78
+
                adc dest+0
                sta dest+0
                sta crtc_addr_lsb

                lda dest+1
                adc #$02
                bpl dest_updated
                sec
                sbc #$50
dest_updated:
                sta dest+1
                
                dec fy
                bpl fill_column_loop

                inc fx+0
                bne fx_updated
                inc fx+1
fx_updated:

                lda fx+0
                ora #$80
                sta sound_tmp

                lda fx+0
                lsr a
                and #15
                ora sound_tmp
                jsr sn_write

                lda dest+1
                ldy #3
div8_loop:
                lsr a
                ror crtc_addr_lsb
                dey
                bne div8_loop

                ldx #12
                stx $fe00
                sta $fe01
                inx
                stx $fe00
                lda crtc_addr_lsb
                sta $fe01

                jmp main_loop

                bmi +
+

waves: .proc
                lda fx
                and #31
                cmp fy
                bcc sierpinski.bg
                bra sierpinski.fg
                .endproc

sierpinski: .proc
                lda fy
                and fx
                bne bg
fg:
                lda fx
                rts

bg:
                lda #7
                rts
                .endproc

sn_write:
                sta system_via.ora_no_handshake

                stz system_via.orb
pixels:
                .byte $3f       ;7,7 = 1-byte NOP = nop +1 1
                .byte $3c       ;6,6 = 1-byte NOP = nop +1 2
                .byte $0f       ;3,3 = BIT abs,x  = BIT $330c,x +4 6
                .byte $0c       ;2,2 = TSB abs    = -
                .byte $33       ;5,5 = 1-byte NOP = -
                .byte $03       ;1,1 = 1-byte NOP = nop +1 7
                .byte $30       ;4,4 = BMI        = bmi +2/+3 9/10
                .byte $00       ;0,0 = BRK        = -

                ldx #8          ;+2 11
                stx system_via.orb ;+4 15
                rts
                
init:
                .byte 5
                .byte 2,22
init_end:
                .endsection