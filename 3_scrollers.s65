                .include "submodules/beeb/include/beeb.s65"
                .cpu '65c02'

;-------------------------------------------------------------------------

terminal_rom=15

                ; naughty MOS 3.20 entry points
font_data=$b900
; set_crtc_address_for_mode7=$c70d
                
;-------------------------------------------------------------------------


*=$70
                .dsection zp
*=$1900
                .dsection code

;-------------------------------------------------------------------------

                .section zp
dest: .fill 2
glyph: .fill 2
pixel_mask: .fill 1
                .endsection zp

; Scroller: .struct text,n
; index: .byte \text-scrolltexts
; max_index: .byte \n
; reset_index: .byte \text-scrolltexts
; counter: .byte 0
; mask: .byte 128
;                 .endstruct

scroll_text: .macro text
                .for i=0,i<len(\text),i+=1
                .cerror (\text[i]<'A'||\text[i]>'Z'),"letters only"
                .byte $80|((\text[i]-63)*4)
                .endfor
                .endmacro

;-------------------------------------------------------------------------

                .section code
start:
                ldx #size(init_text)-1
-
                lda init_text,x
                jsr oswrch
                dex
                bpl -

                sei
                lda #terminal_rom
                sta romsel

                ldx #6
                lda #25
                jsr write_crtc

                ldx #8
                lda #0
                jsr write_crtc

main_loop:
                ldx #12
                lda top_left+1
                tay
                eor #$54
                jsr write_crtc
                inx
                lda top_left+0
                jsr write_crtc

                pha             ;LSB
                phy             ;MSB
                pha             ;LSB
                phy             ;MSB

check_via_loop:
                lda #VIAIRQ.ca1
                bit system_via.ifr ;V when T1
                bvc not_t1
got_t1:
                lda acccon
                eor #1
                sta acccon
                lda #$40
                sta system_via.ifr
                bra check_via_loop
not_t1:
                beq check_via_loop
                sta system_via.ifr

                inc top_left+0
                bne +
                inc top_left+1
                bpl +
                lda #$7c
                sta top_left+1
+

                lda #4
                trb acccon      ;write to main RAM
                ply
                pla
                ldx #0
                jsr draw_screen

                lda #4
                tsb acccon      ;write to shadow RAM
                ply
                pla
                ldx #1
                jsr draw_screen

                lsr mask
                bcc main_loop
                ror mask        ;reinstate the 128

                ldx #0
                jsr update_index
                inx
                jsr update_index

                bra main_loop

draw_screen: .block
                sta dest+0
                sty dest+1

                lda pixel_masks,x
                sta pixel_mask

                ldy indexes,x
                lda scrolltexts,y
                asl a
                sta read_glyph+1
                
                ldx #0
                jsr write_1_row

                ldy #$f8
write_glyph_row:
                ldx #0
read_glyph:
                lda $b900,y
                and mask
                beq got_value
                dex
got_value:
                jsr write_1_row
                jsr write_1_row
                ; jsr write_1_row
                iny
                bne write_glyph_row

                rts
                .endblock

update_index: .block
                ldy indexes,x
                iny
                lda scrolltexts,y
                bmi got_index
                tay
got_index:
                tya             ;aaargh.
                sta indexes,x
                rts
                .endblock
                
write_crtc:
                stx $fe00
                sta $fe01
                rts

write_1_row:
                clc
                lda dest+0
                adc #40
                sta dest+0
                bcc +
                inc dest+1
                bpl +
                lda #$7c
                sta dest+1
+
                txa
                and pixel_mask
                sta (dest)
                rts

indexes: .byte scrolltexts.lovebyte-scrolltexts,scrolltexts.bitshifters-scrolltexts
mask: .byte 128
pixel_masks: .byte $0f,$ff
; index: .byte 0
top_left: .word $7c00

init_text: .block
_:=[]
_..=[22,128+5]
_..=[22,5]
                .byte _[::-1]
                .endblock
                
scrolltexts: .block
lovebyte:
                .scroll_text 'LOVEBYTE'
                .byte lovebyte-scrolltexts
bitshifters:
                .scroll_text 'BITSHIFTERS'
                .byte bitshifters-scrolltexts
                .endblock
                
                 .endsection code
                