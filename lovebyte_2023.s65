                .include "submodules/beeb/include/beeb.s65"
                .cpu '65c02'

;-------------------------------------------------------------------------

*=$00
                .dsection zp
*=$1900
                .dsection code

nblobs=8

;-------------------------------------------------------------------------

                .section zp
dest: .fill 2
xhs: .fill nblobs
xls: .fill nblobs
dxhs: .fill nblobs
dxls: .fill nblobs
                .endsection

;-------------------------------------------------------------------------

                .section code
start:
                ldx #0
clear_zp_loop:
                stz 0,x
                inx
                bpl clear_zp_loop

                ldx #7
                lda #1
init_dxs_loop:
                sta dxls,x
                asl a
                dex
                bpl init_dxs_loop

                ldy #2
scale_dxs_loop:
                ldx #7
shl_dxs_loop:
                asl dxls,x
                rol dxhs,x
                dex
                bpl shl_dxs_loop
                dey
                bne scale_dxs_loop
                
                ldx #0
-
                lda print_setup,x
                jsr oswrch
                inx
                cpx #print_setup_end-print_setup
                bne -

                lda #$7c
                sta dest+1

demo_loop:
                lda #19
                jsr osbyte
                
                ldy #31
                lda #0
-
                sta (dest),y
                dey
                bpl -

                ldx #nblobs-1
blobs_loop:
                ldy xhs,x
                lda colours,x
                sta (dest),y

                clc
                lda xls,x
                adc dxls,x
                sta xls,x
                lda xhs,x
                adc dxhs,x
                sta xhs,x
                bmi change_dir_0
                cmp #32
                bcs change_dir_31
next_blob:
                dex
                bpl blobs_loop
                
                clc
                lda dest+0
                adc #32
                sta dest+0
                ldx #13
                jsr set_crtc
                lda dest+1
                adc #0
                bpl +
                lda #$7c
+
                sta dest+1
                eor #($7c^$28)
                jsr set_crtc

                jmp demo_loop

change_dir_0:
                stz xhs,x
                stz xls,x
                bra change_dir

change_dir_31:
                lda #31
                sta xhs,x
                lda #$ff
                sta xls,x
change_dir:
                clc
                lda dxls,x
                eor #$ff
                adc #1
                sta dxls,x
                lda dxhs,x
                eor #$ff
                adc #0
                sta dxhs,x
                bra next_blob
                
set_crtc:
                stx $fe00
                sta $fe01
                dex
                rts

mode5_pixel: .function colour
                .cerror colour<0||colour>3,"bad mode 5 colour"
                .endfunction (colour&2)<<3|(colour&1)
                
mode5_colours: .function colour0,colour1,colour2,colour3
                .endfunction mode5_pixel(colour0)<<3|mode5_pixel(colour1)<<2|mode5_pixel(colour2)<<1|mode5_pixel(colour3)<<0
                
colours:
                .byte mode5_colours(0,1,0,1)
                .byte mode5_colours(1,1,1,1)
                .byte mode5_colours(3,1,3,1)
                .byte mode5_colours(2,1,2,1)
                .byte mode5_colours(2,2,2,2)
                .byte mode5_colours(3,0,3,0)
                .byte mode5_colours(3,2,3,2)
                .byte mode5_colours(3,3,3,3)

print_setup:
                .byte 22,5
                .byte 23,0,12,$28
                .fill 6
                .byte 23,0,1,32
                .fill 6
print_setup_end:
                
                .endsection