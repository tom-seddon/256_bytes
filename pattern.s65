                .include "submodules/beeb/include/beeb.s65"
                .cpu '65c02'

;-------------------------------------------------------------------------

*=$70
                .dsection zp
*=$1900
                .dsection code

;-------------------------------------------------------------------------

                .section zp
addr:
                .fill 2
; xc:
;                 .fill 1
yc:
                .fill 1
counter:
                .fill 1
pixel:
                .fill 1
temp:
                .fill 1
temp_counter:
                .fill 1
                .endsection

;-------------------------------------------------------------------------

                .section code
start:
                ; best to start with counter set to 0, to ensure the
                ; first bit of music lasts for a decent amount of
                ; time.
                ;
                ; the initial value of addr isn't so important.
                stz counter

init_text_offset=256-init_text_size
                ldx #init_text_offset
init_loop:
                lda init_text-init_text_offset,x
                jsr oswrch
                inx
                bne init_loop
                
                sei
                stz $fe20
                sta $fe21

                ; set some random frequency on tone 3
                ;
                ; (best to reuse tone 3, as it's the bootup beep)
                lda #$80
                jsr sn_write
                lsr a           ;A=$40
                jsr sn_write

fix_addr_msb:
                inc addr+1
                bpl got_addr_msb

                jsr next_frame

got_addr_msb:
                lda addr+1
                and #%00000011
                ora #$7c
                sta addr+1

do_pixel:                
                lda addr+1
                sta yc
                lda addr+0

                ; addr high nybble is always 7 (%0111)
                asl a
                rol yc          ;C=0
                asl a
                rol yc          ;C=1
                asl a
                rol yc          ;C=1

                lda counter
layer0:
                jsr type_codes+1*type_code_size
                and #4
                sta temp

                lda counter
                lsr a
                tax
                sec
layer1:
                jsr type_codes+2*type_code_size
                and #8
                ora temp
                lsr a
                sta temp

                txa
                lsr a
                sec
layer2:
                jsr type_codes+3*type_code_size
                and #8
                ora temp
                lsr a
                
pixel_mask=*+1
                and #0
                tax

                asl a
call_music:
                jsr music1
                and #$0f
                ora #%10010000  ;tone 3 attenuation
                jsr sn_write
                
                lda pixel_table,x
                sta (addr)

next_byte:
                inc addr+0
                beq fix_addr_msb

                bra do_pixel

next_frame:
                ; TODO - could use top 6 bits of address instead?

                lda acccon
                eor #acccon.d|acccon.x
                sta acccon

                inc counter
                bne +
                ldx #$18        ;CLC
                stx update_sequence
+
                lda counter
                bit #7
                bne done

update_sequence:
                sec
                rol pixel_mask

                lda call_music+1
                eor #<(music1^music2)
                sta call_music+1
                
                ; next frame...
                ldx #layer0-start
                jsr change_layer

                ldx #layer1-start
                jsr change_layer

                ldx #layer2-start
change_layer:
                clc
                lda start+1,x   ;code LSB
                adc #type_code_size
                bcc +
                lda #type_codes-start
+
                sta start+1,x
music2:
                ora counter
                ;lsr a
done:
                rts

sn_write:
                sta system_via.ora_no_handshake
                stz system_via.orb
                pha
                pla
                ldy #8
                sty system_via.orb
                rts

pixel_value: .function colour
right=(colour&8)<<3|(colour&4)<<2|(colour&2)<<1|(colour&1)<<0
                .endfunction (right<<1|right<<0)
                
pixel_table:
                .for i=0,i<8,i+=1
                .if (i&4)!=0
                .byte pixel_value(8) ;yellow
                .elsif (i&2)!=0
                .byte pixel_value(2) ;red
                .elsif (i&1)!=0
                .byte pixel_value(0) ;blue
                .else
                .byte pixel_value(1) ;black
                .endif
                .endfor
                
                .fill 256-(types_end-fill_end)-(*-start)
fill_end:
                
type_code_size=6

init_text:
                .byte 22,133     ;shadow mode 5
                .byte 23,0,12,40 ;R12=$28
                ; 6 spare bytes - end of VDU 23
music1:
                eor #$0f
                and counter
                rts
                .byte 0         ;spare
                .cerror *-music1!=6,""
; init_text_end=*+10
init_text_size=*+10-init_text
                .byte 23,0,1,32 ;R1=32
                ; 6 dummy bytes - end of VDU 23
type_codes:                
type4: .block
                ; chequerboard scroll east
                sbc addr+0
                eor yc
                rts
                .byte 3         ;palette value - colour 0 = blue
                .endblock
                .cerror size(type4)!=type_code_size,''
type0: .block
                ; dots scroll west
                adc addr+0
                and yc
                asl a
                rts
                .endblock
                .cerror size(type0)!=type_code_size,''
               
type1: .block
                ; slash scroll east
                sbc addr+0
                sec
                sbc yc
                rts
                .endblock
                .cerror size(type1)!=type_code_size,''

type2: .block
                ; grid scroll north
                adc yc
                ora addr+0
                asl a
                rts
                .endblock
                .cerror size(type2)!=type_code_size,''

type3: .block
                ; backslash scroll west
                adc addr+0
                sec
                sbc yc
                rts
                .endblock
                .cerror size(type3)!=type_code_size,''
types_end:
                .endsection